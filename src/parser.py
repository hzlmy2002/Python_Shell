from parsita import *
from appFactory import AppNotFoundError, getApp
from commandTree import (
    Argument,
    InRedirection,
    OutRedirection,
    Call,
    Seq,
    Parameter,
    Pipe,
)
from apps.App import App


class CommandParsers(TextParsers, whitespace=None):
    singleQuoted = "'" >> reg(r"[^\n\r']*") << "'"
    backQuoted = "`" >> reg(r"[^\n\r`]*") << "`"
    doubleQuoted = (
        '"' >> rep("`" & reg(r"[^\n\r`]*") & "`" | reg(r"[^\n\r\"`]+")) << '"' > "".join
    )  # concatenate list returned by rep() into single quote string
    quoted = singleQuoted | backQuoted | doubleQuoted

    unquoted = reg(r"[^-\s'\"`;|<>][^\s'\"`;|<>]*")

    argument = (quoted | unquoted) > Argument
    parameter = reg(r"-[^\s'\"`;|<>]+") > Parameter

    whitespace = reg(r"[ \t]+")
    inRedirection = (">" >> whitespace >> argument) > InRedirection
    outRedirection = ("<" >> whitespace >> argument) > OutRedirection
    redirection = inRedirection | outRedirection

    atom = argument | redirection | parameter

    def makeCall(args) -> "Call":
        redirections = args[0]
        app = args[1].getArg()
        atoms = args[2]

        # merge sublists generated by combinator
        mergedArgs = redirections + atoms
        return Call(app, mergedArgs)

    call = (
        (opt(whitespace) >> rep(redirection << whitespace))
        & argument
        & (rep(whitespace >> atom) << opt(whitespace))
    ) > makeCall

    pipe = rep1sep(call, "|") > Pipe
    command = rep1sep(longest(call, pipe), ";") > Seq


if __name__ == "__main__":
    command = CommandParsers.command.parse("cd . ; echo eee | echo").or_die()
    pipe = command.getCommands()[1]
    call = pipe.getCalls()[0]
    print(call.getApp())
    for a in call.getArgs():
        print(a.getArg())
