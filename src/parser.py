from parsita import *
from appfactory import AppNotFoundError, appFactory
from commandtree import Argument, InRedirection, OutRedirection, Call, Seq, Parameter
from apps.App import App


class CommandParsers(TextParsers, whitespace=None):
    singleQuoted = "'" >> reg(r"[^\n\r']*") << "'"
    backQuoted = "`" >> reg(r"[^\n\r`]*") << "`"
    doubleQuoted = (
        '"' >> rep("`" & reg(r"[^\n\r`]*") & "`" | reg(r"[^\n\r\"`]+")) << '"' > "".join
    )  # concatenate list returned by rep() into single quote string
    quoted = singleQuoted | backQuoted | doubleQuoted

    unquoted = reg(r"[^-][^\s'\"`;|<>]*")

    argument = (quoted | unquoted) > Argument
    parameter = reg(r"-[^\s'\"`;|<>]+") > Parameter

    whitespace = reg(r"[ \t]+")
    inRedirection = (">" >> whitespace >> argument) > InRedirection
    outRedirection = ("<" >> whitespace >> argument) > OutRedirection
    redirection = inRedirection | outRedirection

    atom = argument | redirection | parameter

    def getApp(arg: "Argument") -> Parser[str, "App"]:
        appName = arg.getArg()
        try:
            app = appFactory(appName)
        except AppNotFoundError:
            return failure(f"Application {appName} not found.")
        return success(app)

    def makeCall(args) -> "Call":
        redirections = args[0]
        app = args[1]
        atoms = args[2]

        # merge sublists generated by combinator
        mergedArgs = redirections + atoms
        return Call(app, mergedArgs)

    call = (
        (opt(whitespace) >> rep(redirection << whitespace))
        & (argument >= getApp)
        & (rep(whitespace >> atom) << opt(whitespace))
    ) > makeCall

    command = rep1sep(call, ";") > Seq


if __name__ == "__main__":
    command = CommandParsers.command.parse("head -n test.txt").or_die()
    call = command.getCommands()[0]
    print(call.getApp())
    print(call.getArgs())
