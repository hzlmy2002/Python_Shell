from parsita import *
from commandTree import (
    Argument,
    InRedirection,
    OutRedirection,
    Call,
    Pipe,
    Seq,
    Substitution,
)
from appFactory import appFactory, AppNotFoundError
from typing import Callable
from apps.Stream import Stream


class CommandParsers(TextParsers, whitespace=None):
    singleQuoted = "'" >> reg(r"[^\n\r']*") << "'" > Argument
    backQuoted = "`" >> reg(r"[^\n\r`]*") << "`" > Substitution
    doubleQuoted = (
        '"' >> rep("`" & reg(r"[^\n\r`]*") & "`" | reg(r"[^\n\r\"`]+")) << '"' > "".join
    ) > Argument  # concatenate list returned by rep() into single quote string
    quoted = singleQuoted | backQuoted | doubleQuoted

    unquoted = reg(r"[^\s'\"`;|<>]+") > Argument

    argument = quoted | unquoted

    whitespace = reg(r"[ \t]+")
    inRedirection = ("<" >> whitespace >> argument) > InRedirection
    outRedirection = (">" >> whitespace >> argument) > OutRedirection
    redirection = inRedirection | outRedirection

    atom = redirection | argument

    def getApp(arg: "Argument") -> Parser[str, str]:
        appName = arg.getArg()        
        return success(appName)

    def makeCall(args) -> "Call":
        redirections = args[0]
        appName=args[1]
        try:
            app = appFactory(args[1])
        except AppNotFoundError:
            return failure(f"Application '{args[1]}' not found.")
        atoms = args[2]
        # merge sublists generated by combinator
        mergedArgs = redirections + atoms
        return Call(appName,app, mergedArgs)

    call = (
        (opt(whitespace) >> rep(redirection << whitespace))
        & (argument >= getApp)
        & (rep(whitespace >> atom) << opt(whitespace))
    ) > makeCall

    pipe = rep1sep(call, "|") > Pipe
    command = rep1sep(longest(call, pipe), ";") > Seq


def parseCommand(cmdline: str):
    return CommandParsers.command.parse(cmdline).or_die()


if __name__ == "__main__":
    seq = parseCommand('echo `cat tmp.py` asd `cat tmp.py`')
    call = seq.getCommands()[0]
    sub = call.getArgs()[0]
    print(sub.getCmdline())
